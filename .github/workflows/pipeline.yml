name: Pipeline

on:
  push:
    branches:
      - main

permissions:
  checks: write # Permite escribir check runs para mostrar resultados de tests
  actions: read # Permite leer acciones
  contents: read # Permite leer el contenido del repositorio

jobs:
  #=======================
  # STAGE: BUILD AND TEST
  #=======================
  build-and-test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Backend Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Prepare Backend Artifact
        run: |
          mkdir -p backend-artifact
          cp -r backend/src/* backend-artifact/
          cp backend/requirements.txt backend-artifact/
      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: backend-artifact/
          if-no-files-found: error

  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install
      - name: Create Frontend .env File
        run: |
          cd frontend
          echo "VITE_API_URL_QA=${{ secrets.BACKEND_QA_URL }}" > .env
          echo "VITE_API_URL_PROD=${{ secrets.BACKEND_PROD_URL }}" >> .env
          echo "VITE_FRONTEND_URL=${{ secrets.FRONTEND_QA_URL }}" >> .env
          echo "VITE_FIREBASE_CONFIG_QA=${{ secrets.FIREBASE_CONFIG_QA }}" >> .env
          echo "VITE_GOOGLE_CLIENT_ID_QA=${{ secrets.GOOGLE_CLIENT_ID_QA }}" >> .env
          echo "VITE_FIREBASE_CONFIG_PROD=${{ secrets.FIREBASE_CONFIG_PROD }}" >> .env
          echo "VITE_GOOGLE_CLIENT_ID_PROD=${{ secrets.GOOGLE_CLIENT_ID_PROD }}" >> .env
          echo "VITE_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> .env
          echo "VITE_OSRM_URL=${{ secrets.OSRM_URL }}" >> .env
          echo "VITE_FIREBASE_VAPID_KEY_QA=${{ secrets.FIREBASE_VAPID_KEY_QA }}" >> .env
          echo "VITE_FIREBASE_VAPID_KEY_PROD=${{ secrets.FIREBASE_VAPID_KEY_PROD }}" >> .env
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
      - name: Crear archivos de configuraciÃ³n de Firebase
        run: |
          cd frontend/public

          echo "self.FIREBASE_CONFIG = ${{ secrets.FIREBASE_CONFIG_QA }};" > firebase-config-qa.js
          echo "self.FIREBASE_CONFIG = ${{ secrets.FIREBASE_CONFIG_PROD }};" > firebase-config-prod.js
      - name: Copy staticwebapp.config.json and firebase-configs to dist
        run: |
          cp frontend/staticwebapp.config.json frontend/dist/
      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: frontend/dist/
          if-no-files-found: error

  #==========================================
  # STAGE: DEPLOY TO QA AND INTEGRATION TEST
  #==========================================
  deploy-backend-qa:
    needs: build-and-test-backend
    runs-on: ubuntu-latest
    steps:
      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-artifact
          path: .
      - name: Create Backend Environment File
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_QA_URL }}" > env.config
          echo "FRONTEND_URL=${{ secrets.FRONTEND_QA_URL }}" >> env.config
          echo "FIREBASE_CREDENTIALS=${{ secrets.FIREBASE_CREDENTIALS_JSON_QA }}" >> env.config
          echo "FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL_QA }}" >> env.config
          echo "EMAIL_ADMIN=${{ secrets.EMAIL_ADMIN_QA }}" >> env.config
          echo "NOMBRE_ADMIN=${{ secrets.NOMBRE_ADMIN_QA }}" >> env.config
          echo "PASSWORD_ADMIN=${{ secrets.PASSWORD_ADMIN_QA }}" >> env.config
          echo "GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS_JSON_QA }}" >> env.config
          echo "GOOGLE_CLOUD_BUCKET_NAME=${{ secrets.GOOGLE_CLOUD_BUCKET_NAME_QA }}" >> env.config
          echo "GOOGLE_SHEET_ID=${{ secrets.GOOGLE_SHEET_ID }}" >> env.config
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'Inversur-QA'
          publish-profile: ${{ secrets.AZURE_APP_SERVICE_PUBLISH_PROFILE_QA }}
      - name: Start Azure App Service
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp start --name Inversur-QA --resource-group Inversur

  deploy-frontend-qa:
    needs: build-and-test-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifact
          path: frontend/dist/
      - name: Rename QA config
        run: |
          cp frontend/dist/firebase-config-qa.js frontend/dist/firebase-config.js
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_QA }}
          action: "upload"
          app_location: "frontend/dist"
          skip_app_build: true

  #=======================
  # STAGE: DEPLOY TO PROD
  #=======================
  deploy-backend-prod:
    needs: deploy-backend-qa
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-artifact
          path: .
      - name: Create Backend Environment File
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_PROD_URL }}" > env.config
          echo "FRONTEND_URL=${{ secrets.FRONTEND_PROD_URL }}" >> env.config
          echo "FIREBASE_CREDENTIALS=${{ secrets.FIREBASE_CREDENTIALS_JSON_PROD }}" >> env.config
          echo "FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL_PROD }}" >> env.config
          echo "EMAIL_ADMIN=${{ secrets.EMAIL_ADMIN_PROD }}" >> env.config
          echo "NOMBRE_ADMIN=${{ secrets.NOMBRE_ADMIN_PROD }}" >> env.config
          echo "PASSWORD_ADMIN=${{ secrets.PASSWORD_ADMIN_PROD }}" >> env.config
          echo "GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS_JSON_PROD }}" >> env.config
          echo "GOOGLE_CLOUD_BUCKET_NAME=${{ secrets.GOOGLE_CLOUD_BUCKET_NAME_PROD }}" >> env.config
          echo "GOOGLE_SHEET_ID=${{ secrets.GOOGLE_SHEET_ID }}" >> env.config
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'Inversur'
          publish-profile: ${{ secrets.AZURE_APP_SERVICE_PUBLISH_PROFILE_PROD }}
      - name: Start Azure App Service
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp start --name Inversur --resource-group Inversur

  deploy-frontend-prod:
    needs: deploy-frontend-qa
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifact
          path: frontend/dist/
      - name: Rename PROD config
        run: |
          cp frontend/dist/firebase-config-prod.js frontend/dist/firebase-config.js
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          action: "upload"
          app_location: "frontend/dist"
          skip_app_build: true