name: Pipeline

on:
  push:
    branches:
      - main

permissions:
  checks: write # Permite escribir check runs para mostrar resultados de tests
  actions: read # Permite leer acciones
  contents: read # Permite leer el contenido del repositorio

jobs:
  #=======================
  # STAGE: BUILD AND TEST
  #=======================
  build-and-test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Backend Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create Backend QA Environment File
        run: |
          cd backend/src
          echo "DATABASE_URL=${{ secrets.DATABASE_QA_URL }}" > env.config
          echo "FRONTEND_URL=${{ secrets.FRONTEND_QA_URL }}" >> env.config
          echo "FIREBASE_CREDENTIALS=${{ secrets.FIREBASE_CREDENTIALS_JSON_QA }}" >> env.config
          echo "FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL_QA }}" >> env.config
          echo "EMAIL_ADMIN=${{ secrets.EMAIL_ADMIN_QA }}" >> env.config
          echo "NOMBRE_ADMIN=${{ secrets.NOMBRE_ADMIN_QA }}" >> env.config
          echo "PASSWORD_ADMIN=${{ secrets.PASSWORD_ADMIN_QA }}" >> env.config
          echo "GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS_JSON_QA }}" >> env.config
          echo "GOOGLE_CLOUD_BUCKET_NAME=${{ secrets.GOOGLE_CLOUD_BUCKET_NAME_QA }}" >> env.config
          echo "GOOGLE_SHEET_ID=${{ secrets.GOOGLE_SHEET_ID }}" >> env.config
          echo "VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}" >> env.config
      - name: Create Backend PROD Environment File
        run: |
          cd backend/src
          echo "DATABASE_URL=${{ secrets.DATABASE_QA_URL }}" > env.config.prod
          echo "FRONTEND_URL=${{ secrets.FRONTEND_QA_URL }}" >> env.config.prod
          echo "FIREBASE_CREDENTIALS=${{ secrets.FIREBASE_CREDENTIALS_JSON_QA }}" >> env.config.prod
          echo "FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL_QA }}" >> env.config.prod
          echo "EMAIL_ADMIN=${{ secrets.EMAIL_ADMIN_QA }}" >> env.config.prod
          echo "NOMBRE_ADMIN=${{ secrets.NOMBRE_ADMIN_QA }}" >> env.config.prod
          echo "PASSWORD_ADMIN=${{ secrets.PASSWORD_ADMIN_QA }}" >> env.config.prod
          echo "GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS_JSON_QA }}" >> env.config.prod
          echo "GOOGLE_CLOUD_BUCKET_NAME=${{ secrets.GOOGLE_CLOUD_BUCKET_NAME_QA }}" >> env.config.prod
          echo "GOOGLE_SHEET_ID=${{ secrets.GOOGLE_SHEET_ID }}" >> env.config.prod
          echo "VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}" >> env.config.prod
      - name: Create Backend Environment Test File
        run: |
          cd backend/src
          echo "DATABASE_URL=${{ secrets.DATABASE_QA_URL }}" > env.config.test
          echo "FRONTEND_URL=${{ secrets.FRONTEND_QA_URL }}" >> env.config.test
          echo "FIREBASE_CREDENTIALS=${{ secrets.FIREBASE_CREDENTIALS_JSON_QA }}" >> env.config.test
          echo "FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL_QA }}" >> env.config.test
          echo "EMAIL_ADMIN=${{ secrets.EMAIL_ADMIN_QA }}" >> env.config.test
          echo "NOMBRE_ADMIN=${{ secrets.NOMBRE_ADMIN_QA }}" >> env.config.test
          echo "PASSWORD_ADMIN=${{ secrets.PASSWORD_ADMIN_QA }}" >> env.config.test
          echo "GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS_JSON_QA }}" >> env.config.test
          echo "GOOGLE_CLOUD_BUCKET_NAME=${{ secrets.GOOGLE_CLOUD_BUCKET_NAME_QA }}" >> env.config.test
          echo "GOOGLE_SHEET_ID=${{ secrets.GOOGLE_SHEET_ID }}" >> env.config.test
          echo "VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}" >> env.config.test
          echo "E2E_TESTING=true" >> env.config.test
      - name: Run Backend Tests with Coverage
        run: |
          cd backend
          pytest -v --cov=src --cov-report=xml --junitxml=pytest-report.xml
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Pytest Results
          path: backend/pytest-report.xml
          reporter: java-junit
      - name: Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: backend/coverage.xml
          format: markdown
          output: file
          fail_below_min: false
      - name: Write Coverage to Summary
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
      - name: Verify Backend Test Env File
        run: |
          cd backend/src
          ls -la
      - name: Prepare Backend Artifact
        run: |
          mkdir -p backend-artifact
          cp -r backend/src/* backend-artifact/
          cp backend/requirements.txt backend-artifact/
      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: backend-artifact/
          if-no-files-found: error

  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install
      - name: Create Frontend .env File
        run: |
          cd frontend
          echo "VITE_API_URL_QA=${{ secrets.BACKEND_QA_URL }}" > .env
          echo "VITE_API_URL_PROD=${{ secrets.BACKEND_PROD_URL }}" >> .env
          echo "VITE_FRONTEND_URL=${{ secrets.FRONTEND_QA_URL }}" >> .env
          echo "VITE_FIREBASE_CONFIG_QA=${{ secrets.FIREBASE_CONFIG_QA }}" >> .env
          echo "VITE_GOOGLE_CLIENT_ID_QA=${{ secrets.GOOGLE_CLIENT_ID_QA }}" >> .env
          echo "VITE_FIREBASE_CONFIG_PROD=${{ secrets.FIREBASE_CONFIG_PROD }}" >> .env
          echo "VITE_GOOGLE_CLIENT_ID_PROD=${{ secrets.GOOGLE_CLIENT_ID_PROD }}" >> .env
          echo "VITE_GOOGLE_MAPS_API_KEY_QA=${{ secrets.GOOGLE_MAPS_API_KEY_QA }}" >> .env
          echo "VITE_GOOGLE_MAPS_API_KEY_PROD=${{ secrets.GOOGLE_MAPS_API_KEY_PROD }}" >> .env
          echo "VITE_OSRM_URL=${{ secrets.OSRM_URL }}" >> .env
          echo "VITE_WEB_PUSH_PUBLIC_KEY_QA=${{ secrets.VAPID_PUBLIC_KEY }}" >> .env
          echo "VITE_WEB_PUSH_PUBLIC_KEY_PROD=${{ secrets.VAPID_PRIVATE_KEY }}" >> .env
      - name: Create Frontend .env.test File
        run: |
          cd frontend
          echo "VITE_API_URL_QA=${{ secrets.BACKEND_QA_URL }}" > .env.test
          echo "VITE_API_URL_PROD=${{ secrets.BACKEND_PROD_URL }}" >> .env.test
          echo "VITE_FRONTEND_URL=${{ secrets.FRONTEND_QA_URL }}" >> .env.test
          echo "VITE_FIREBASE_CONFIG_QA=${{ secrets.FIREBASE_CONFIG_QA }}" >> .env.test
          echo "VITE_GOOGLE_CLIENT_ID_QA=${{ secrets.GOOGLE_CLIENT_ID_QA }}" >> .env.test
          echo "VITE_FIREBASE_CONFIG_PROD=${{ secrets.FIREBASE_CONFIG_PROD }}" >> .env.test
          echo "VITE_GOOGLE_CLIENT_ID_PROD=${{ secrets.GOOGLE_CLIENT_ID_PROD }}" >> .env.test
          echo "VITE_GOOGLE_MAPS_API_KEY_QA=${{ secrets.GOOGLE_MAPS_API_KEY_QA }}" >> .env.test
          echo "VITE_GOOGLE_MAPS_API_KEY_PROD=${{ secrets.GOOGLE_MAPS_API_KEY_PROD }}" >> .env.test
          echo "VITE_OSRM_URL=${{ secrets.OSRM_URL }}" >> .env.test
          echo "VITE_WEB_PUSH_PUBLIC_KEY_QA=${{ secrets.VAPID_PUBLIC_KEY }}" >> .env.test
          echo "VITE_WEB_PUSH_PUBLIC_KEY_PROD=${{ secrets.VAPID_PRIVATE_KEY }}" >> .env.test
          echo "VITE_NODE_ENV=test" >> .env.test
      - name: Run Frontend Tests with Coverage
        run: |
          cd frontend
          cp .env.test .env
          npm run coverage
          rm .env
      - name: Publish Vitest Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Vitest Results
          path: frontend/junit.xml
          reporter: java-junit
      - name: Install xmlstarlet
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet
      - name: Write Frontend Coverage to Summary
        run: |
          echo "## Frontend Unit Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "| File | Line Rate | Health |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ -f frontend/coverage/clover.xml ]; then
            xmlstarlet sel -t -m "//file" -v "concat(@name,'|',metrics/@statements,'|',metrics/@coveredstatements)" -n frontend/coverage/clover.xml |
            while IFS='|' read -r FILE STATEMENTS COVERED_STATEMENTS; do
              if [ -z "$STATEMENTS" ] || [ "$STATEMENTS" = "0" ]; then
                LINE_RATE="0%"
                HEALTH="❌"
              else
                LINE_RATE_INT=$(echo "($COVERED_STATEMENTS * 100) / $STATEMENTS" | bc)
                LINE_RATE=$(printf "%s%%" "$LINE_RATE_INT")
                if [ "$LINE_RATE_INT" -ge 80 ]; then
                  HEALTH="✔"
                elif [ "$LINE_RATE_INT" -ge 50 ]; then
                  HEALTH="➖"
                else
                  HEALTH="❌"
                fi
              fi
              echo "| $FILE | $LINE_RATE | $HEALTH |" >> $GITHUB_STEP_SUMMARY
            done

            TOTAL_STATEMENTS=$(xmlstarlet sel -t -v "//project/metrics/@statements" frontend/coverage/clover.xml)
            COVERED_STATEMENTS=$(xmlstarlet sel -t -v "//project/metrics/@coveredstatements" frontend/coverage/clover.xml)

            if [ -z "$TOTAL_STATEMENTS" ] || [ "$TOTAL_STATEMENTS" -eq 0 ]; then
              LINE_RATE="0%"
              HEALTH="❌"
              SUMMARY="0% (0 / 0)"
            else
              LINE_RATE_INT=$(echo "($COVERED_STATEMENTS * 100) / $TOTAL_STATEMENTS" | bc)
              LINE_RATE=$(printf "%s%%" "$LINE_RATE_INT")
              SUMMARY="$LINE_RATE ($COVERED_STATEMENTS / $TOTAL_STATEMENTS)"
              if [ "$LINE_RATE_INT" -ge 80 ]; then
                HEALTH="✔"
              elif [ "$LINE_RATE_INT" -ge 50 ]; then
                HEALTH="➖"
              else
                HEALTH="❌"
              fi
            fi

            echo "| **All files** | $LINE_RATE | $HEALTH |" >> $GITHUB_STEP_SUMMARY
            echo "| **Summary** | $SUMMARY | $HEALTH |" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No se encontró clover.xml para Vitest" >> $GITHUB_STEP_SUMMARY
            echo "| All files | N/A | ❌ |" >> $GITHUB_STEP_SUMMARY
            echo "| Summary | N/A | ❌ |" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: frontend/dist/
          if-no-files-found: error

  #==========================================
  # STAGE: DEPLOY TO QA AND INTEGRATION TEST
  #==========================================
  deploy-backend-qa:
    needs: build-and-test-backend
    runs-on: ubuntu-latest
    steps:
      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-artifact
          path: .
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'Inversur-QA'
          publish-profile: ${{ secrets.AZURE_APP_SERVICE_PUBLISH_PROFILE_QA }}
      - name: Start Azure App Service
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp start --name Inversur-QA --resource-group Inversur

  deploy-frontend-qa:
    needs: build-and-test-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifact
          path: frontend/dist/
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_QA }}
          action: "upload"
          app_location: "frontend/dist"
          skip_app_build: true
  
    integration-tests:
      needs: [deploy-backend-qa, deploy-frontend-qa]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.12'
        - name: Install Frontend Dependencies
          run: |
            cd frontend
            npm install
        - name: Create Backend Test Environment File
          run: |
            python backend/scripts/render_env_file.py \
              --output backend/src/env.config.test \
              --keys DATABASE_URL FRONTEND_URL FIREBASE_CREDENTIALS FIREBASE_DATABASE_URL \
              EMAIL_ADMIN NOMBRE_ADMIN PASSWORD_ADMIN GOOGLE_CREDENTIALS \
              GOOGLE_CLOUD_BUCKET_NAME GOOGLE_SHEET_ID VAPID_PRIVATE_KEY \
              --append TESTING=true E2E_TESTING=true
          env:
            DATABASE_URL: ${{ secrets.DATABASE_TEST_URL }}
            FRONTEND_URL: ${{ secrets.FRONTEND_TEST_URL }}
            FIREBASE_CREDENTIALS: ${{ secrets.FIREBASE_CREDENTIALS_JSON_TEST }}
            FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL_TEST }}
            EMAIL_ADMIN: ${{ secrets.EMAIL_ADMIN_TEST }}
            NOMBRE_ADMIN: ${{ secrets.NOMBRE_ADMIN_TEST }}
            PASSWORD_ADMIN: ${{ secrets.PASSWORD_ADMIN_TEST }}
            GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS_JSON_TEST }}
            GOOGLE_CLOUD_BUCKET_NAME: ${{ secrets.GOOGLE_CLOUD_BUCKET_NAME_TEST }}
            GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID_TEST }}
            VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY_TEST }}
        - name: Create Frontend Test Environment File
          run: |
            python backend/scripts/render_env_file.py \
              --output frontend/.env.test \
              --keys VITE_API_URL_QA VITE_API_URL_PROD VITE_FRONTEND_URL \
              VITE_FIREBASE_CONFIG_QA VITE_GOOGLE_CLIENT_ID_QA \
              VITE_FIREBASE_CONFIG_PROD VITE_GOOGLE_CLIENT_ID_PROD \
              VITE_GOOGLE_MAPS_API_KEY_QA VITE_GOOGLE_MAPS_API_KEY_PROD \
              VITE_OSRM_URL VITE_WEB_PUSH_PUBLIC_KEY_QA VITE_WEB_PUSH_PUBLIC_KEY_PROD \
              --append VITE_NODE_ENV=test
          env:
            VITE_API_URL_QA: ${{ secrets.VITE_API_URL_QA_TEST }}
            VITE_API_URL_PROD: ${{ secrets.VITE_API_URL_PROD_TEST }}
            VITE_FRONTEND_URL: ${{ secrets.VITE_FRONTEND_URL_TEST }}
            VITE_FIREBASE_CONFIG_QA: ${{ secrets.VITE_FIREBASE_CONFIG_QA_TEST }}
            VITE_GOOGLE_CLIENT_ID_QA: ${{ secrets.VITE_GOOGLE_CLIENT_ID_QA_TEST }}
            VITE_FIREBASE_CONFIG_PROD: ${{ secrets.VITE_FIREBASE_CONFIG_PROD_TEST }}
            VITE_GOOGLE_CLIENT_ID_PROD: ${{ secrets.VITE_GOOGLE_CLIENT_ID_PROD_TEST }}
            VITE_GOOGLE_MAPS_API_KEY_QA: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY_QA_TEST }}
            VITE_GOOGLE_MAPS_API_KEY_PROD: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY_PROD_TEST }}
            VITE_OSRM_URL: ${{ secrets.VITE_OSRM_URL_TEST }}
            VITE_WEB_PUSH_PUBLIC_KEY_QA: ${{ secrets.VITE_WEB_PUSH_PUBLIC_KEY_QA_TEST }}
            VITE_WEB_PUSH_PUBLIC_KEY_PROD: ${{ secrets.VITE_WEB_PUSH_PUBLIC_KEY_PROD_TEST }}
        - name: Run Cypress Tests with Coverage
          env:
            APP_ENV: test
            ENV_CONFIG_FILE: backend/src/env.config.test
            TESTING: "true"
            E2E_TESTING: "true"
          run: |
            cd frontend
            npm run cy:run --reporter mocha-junit-reporter --reporter-options "mochaFile=cypress/results.xml"
        - name: Cleanup Test Environment Files
          if: always()
          run: |
            rm -f backend/src/env.config.test
            rm -f frontend/.env.test
        - name: Publish Test Results
          uses: dorny/test-reporter@v1
          if: always()
          with:
            name: Cypress Results
            path: frontend/cypress/results.xml
            reporter: java-junit

  #=======================
  # STAGE: DEPLOY TO PROD
  #=======================
  deploy-backend-prod:
    needs: integration-tests
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-artifact
          path: .
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'Inversur'
          publish-profile: ${{ secrets.AZURE_APP_SERVICE_PUBLISH_PROFILE_PROD }}
      - name: Start Azure App Service
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp start --name Inversur --resource-group Inversur

  deploy-frontend-prod:
    needs: integration-tests
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifact
          path: frontend/dist/
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          action: "upload"
          app_location: "frontend/dist"
          skip_app_build: true
